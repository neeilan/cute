{"version":3,"sources":["cute.js","assembler.js","example_programs.js","MachineStateView.js","App.js","reportWebVitals.js","index.js"],"names":["REGISTER_NAMES","0","1","2","3","4","5","6","7","8","REGISTER_NUMS","num","OPCODES","name","args","desc","9","10","11","12","13","14","15","16","17","varLen","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33","34","35","36","37","38","39","OPS","HALT","ADD","ADDI","SUB","SUBI","ASSERT","LABEL","JMPL","JMPGT","JMPGTE","JMPEQ","PRINT","SETI","JMPI","JMPEQI","JMPEQIL","PRINTBYTE","DATA","PRINTSTRL","PRINTBYTEI","JMPEQL","SET","JMPLT","JMPLTE","LOAD","PUSH","POP","CALL","RET","CHDATA","STORE","AOL","STORI","JMPNEQIL","MUL","MULI","DIV","DIVI","PCALL","PRET","numArgs","Object","keys","forEach","k","c","char","charCodeAt","_execute","memory","registers","codeStart","codeEnd","oneStep","print","_labels","_statics","currInstr","opCode","label","lhs","rhs","rip","alert","Math","floor","addr","undefined","String","fromCharCode","byteToPrint","console","log","topOfStack","ra","registerStateAtCallTime","pcall_args","i","push","length","splice","registerStateAtReturnTime","retVals","v","module","exports","this","execute","executeStep","setIp","val","lex","source","tokens","currTok","inComment","split","token","join","trim","indexOf","assemble","machine","out","code","disasm","slice","labels","labelNum","opStr","op","Error","toString","opMeta","parseInt","str","j","arg","argAsInt","isNaN","numVarArgs","varArg","memLoad","contents","b","loadAtAddr","asm","CuteMachine","require","Assemble","EXAMPLE_PROGRAMS","STYLES","MachineStateView","props","Array","fill","numAddrsToDisplay","numBytesPerRow","state","memDisplayStartAddr","asmArea","loadAddr","disasmTokens","disasmIsFresh","docInstr","setState","e","newAddr","instrs","entries","meta","bytes","memTable","ripValueAdj","RIP","rspValueAdj","RSP","rbpValueAdj","RBP","_","cols","style","backgroundColor","map","offset","dynaColor","absoluteAddr","disasmAvailable","overflow","className","type","width","border","onChange","memSet","target","value","disabled","Container","Row","textAlign","Col","md","marginBottom","Table","bordered","responsive","size","isRip","isRsp","isRbp","regSet","Button","variant","onClick","run","marginLeft","step","memPrev","memNext","paddingLeft","inspectAddr","placeholder","marginTop","sm","height","minHeight","borderColor","asmAreaEdit","InputGroup","FormControl","setLoadAddr","Append","overflowY","p","Badge","pill","availableInstrs","instr","React","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b2a15479.chunk.js","sourcesContent":["const REGISTER_NAMES = {\n  0 : 'R0',\n  1 : 'R1',\n  2 : 'R2',\n  3 : 'R3',\n  4 : 'R4',\n  5 : 'RRA',\n  6 : 'RBP',\n  7 : 'RSP',\n  8 : 'RIP',\n};\n\n// Reverse mapping of REGISTER_NAMES\nconst REGISTER_NUMS = {};\nfor (let num in REGISTER_NAMES) {\n  REGISTER_NUMS[REGISTER_NAMES[num]] = num;\n}\n\nconst OPCODES = {\n  0: { name: 'HALT', args: 0, desc: 'Args: none  -  Stops execution of the program here. Does not advance IP' },\n  1: { name: 'ADD', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 + Reg2' },\n  2: { name: 'ADDI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg + Immediate' },\n  3: { name: 'SUB', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 - Reg2'  },\n  4: { name: 'SUBI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg - Immediate' },\n  // 5: { name: 'ASSERT', args: 1 , desc: '' },\n  6: { name: 'LABEL', args: 1 , desc: 'Args: <Label>  -  Creates a label with given name, pointing to next instruction' },\n  7: { name: 'JMPL', args: 1 , desc: 'Args: <Label> - Unconditional jump to the label with given name' },\n  8: { name: 'JMPGT', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 > Reg2' },\n  9: { name: 'JMPGTE', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 >= Reg2' },\n  10: { name: 'JMPEQ', args: 3 , desc: 'Args: <Reg1> <Reg2> <Immediate> - Conditional jump to Immediate address if Reg1 equals Reg2' },\n  11: { name: 'PRINT', args: 1 , desc: 'Args: <Reg> - Print the value of Reg' },\n  12: { name: 'SETI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Immediate' },\n  13: { name: 'JMPI', args: 1 , desc: 'Args:  <Address> - Unconditional jump to Address' },\n  14: { name: 'JMPEQI', args: 3 , desc: 'Args: <Reg> <Address1> <Address2> - If Reg = value at Address1, jump to Address2' },\n  15: { name: 'JMPEQIL', args: 3 , desc: 'Args: <Reg> <Address> <Label>  -  If value of Reg equals Immediate, jump to Label' },\n  16: { name: 'PRINTBYTE', args: 1 , desc: 'Args: <Reg> - PRINT, but Reg is a register contaiing address of byte to print' },\n  17: { name: 'DATA', args: 2, varLen: true , desc: 'VarArgs: <Label> <Length> [Bytes] - Defines static data of given Length, with given Label' },\n  // 18: { name: 'PRINTSTRL', args: 1 , desc: '' },\n  19: { name: 'PRINTBYTEI', args: 1 , desc: 'Args: <Immediate> - Prints ASCII character for the given immediate' },\n  20: { name: 'JMPEQL', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 = Reg2' },\n  21: { name: 'SET', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets value Reg1 to the value of Reg2' },\n  22: { name: 'JMPLT', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 < Reg2' },\n  23: { name: 'JMPLTE', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 <= Reg2' },\n  24: { name: 'LOAD', args: 2 , desc: 'Args: <Reg1> <Reg2> - Load byte at address held in Reg2 into Reg1' },\n  25: { name: 'PUSH', args: 1 , desc: 'Args: <Reg> - Pushes the value of Reg to the top of the stack (RSP) and increments RSP' },\n  26: { name: 'POP', args: 1 , desc: 'Args: <Reg>  - Places the value on top of the stack (RSP-1) into Reg and decrements RSP' },\n  27: { name: 'CALL', args: 1 , desc: 'Args: <Label>  -  Pushes RRA onto the stack, sets RRA to next instruction, and jumps to Label' },\n  28: { name: 'RET', args: 0 , desc: 'Args: None  -  Returns control to the instruction at address RRA. Restores RRA to previous RRA value, which is expected to be on top of the stack (RSP-1)' },\n  29: { name: 'CHDATA', args: 2, varLen: true , desc: 'Varargs: <Label> <Length> STRING - Like DATA, but var-length data arg is provided as a character string. Eg. - CHDATA letters 5 ABCDE' },\n  30: { name: 'STORE', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Stores value of Reg1 at address held in Reg2' },\n  31: { name: 'AOL', args: 2 , desc: 'Args: <Label> <Register>  -  Address-of-label instruction. Sets Register to address Label refers to' },\n  32: { name: 'STORI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Stores Immediate value at address held in Reg' },\n  33: { name: 'JMPNEQIL', args: 3 , desc: 'Args: <Reg> <Immediate> <Label>  -  If value of Reg does not equal Immediate, jump to Label' },\n  34: { name: 'MUL', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 * Reg2' },\n  35: { name: 'MULI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg * Immediate' },\n  36: { name: 'DIV', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 / Reg2'  },\n  37: { name: 'DIVI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg / Immediate' },\n  38: { name: 'PCALL', args: 1 , desc: 'Preserved call. Like CALL, but preserves all registers' },\n  39: { name: 'PRET', args: 0 , desc: 'RET equivalent for PCALL - restores all preserved registers' },\n\n\n};\n\nconst OPS = {\n  HALT : 0,\n  ADD : 1,\n  ADDI : 2,\n  SUB : 3,\n  SUBI : 4,\n  ASSERT : 5,\n  LABEL : 6,\n  JMPL : 7,\n  JMPGT : 8,\n  JMPGTE : 9,\n  JMPEQ : 10,\n  PRINT : 11,\n  SETI   : 12,\n  JMPI : 13,\n  JMPEQI : 14,\n  JMPEQIL : 15,\n  PRINTBYTE : 16,\n  DATA : 17, // DATA HELLOWORLD SIZE  'H' 'E'\n  PRINTSTRL : 18, // Print a string at a label\n  PRINTBYTEI : 19,\n  JMPEQL : 20,\n  SET : 21,\n  JMPLT: 22,\n  JMPLTE : 23,\n  LOAD: 24,\n  PUSH : 25,\n  POP : 26,\n  CALL : 27,\n  RET : 28,\n  CHDATA : 29,\n  STORE : 30,\n  AOL : 31,\n  STORI : 32,\n  JMPNEQIL: 33,\n  MUL : 34,\n  MULI : 35, \n  DIV : 36,\n  DIVI : 37,\n  PCALL : 38,\n  PRET : 39,\n};\n\nconst\n    HALT = 0,\n    ADD = 1,\n    ADDI = 2,\n    SUB = 3,\n    SUBI = 4,\n    ASSERT = 5,\n    LABEL = 6,\n    JMPL = 7,\n    JMPGT = 8,\n    JMPGTE = 9,\n    JMPEQ = 10,\n    PRINT = 11,\n    SETI   = 12,\n    JMPI = 13,\n    JMPEQI = 14,\n    JMPEQIL = 15,\n    PRINTBYTE = 16,\n    DATA = 17, // DATA HELLOWORLD SIZE  'H' 'E'\n    PRINTSTRL = 18, // Print a string at a label\n    PRINTBYTEI = 19,\n    JMPEQL = 20,\n    SET = 21,\n    JMPLT = 22,\n    JMPLTE = 23,\n    LOAD = 24,\n    PUSH = 25,\n    POP = 26,\n    CALL = 27,\n    RET = 28,\n    CHDATA = 29,\n    STORE = 30,\n    AOL = 31,\n    STORI = 32, \n    JMPNEQIL = 33,\n    MUL = 34,\n    MULI = 35, \n    DIV = 36,\n    DIVI = 37,\n    PCALL = 38,\n    PRET = 39;\n\nconst numArgs = [];\nObject.keys(OPCODES).forEach(k => numArgs[k] = OPCODES[k].args);\n\nconst registers = [0, 0, 0, 0, 0, 0, 0, 0];\nconst R0 = 0, R1 = 1, R2=2, R3=3, R4=4, RRA=5, RBP= 6, RSP=7, RIP=8;\n\n\nlet memory = [\n  SETI, R1, 1, JMPI, 8, ADDI, R1, 5, ADDI, R1, 8, PRINT, R1, LABEL, 'ADD3MORE', ADDI, R1, 3, PRINT, R1\n];\n\n// Let's try a hello world\nconst c =  char =>  char.charCodeAt(0);\nmemory = [\n  DATA, \"HW\", 11, c('H'), c('e'), c('l'), c('l'), c ('o'), c(' '), c('W'), c('o'), c('r'), c('l'), c('d'),\n  SETI, R0, 11, // Length of str\n  SETI, R1, 0,  // Curr idx in str\n  SETI, R2, 3,  // Address of start of string \n  LABEL, \"PRINTCHAR\",\n  SET, R3, R2, // R3 is a temp we used to calculate start of string + curr index\n  ADD, R3, R1,\n  PRINTBYTE, R3,\n  ADDI, R1, 1,\n  JMPEQL, R1, R0, \"DONE\",\n  JMPL, \"PRINTCHAR\",\n  LABEL, \"DONE\",\n  \n];\n\n\nfunction _execute(memory, registers, codeStart, codeEnd, oneStep, print) {\n  // Find labels and static data in the code\n  const _labels = {};\n  const _statics = {};\n  let currInstr = codeStart;\n  while (currInstr < codeEnd) {\n    const opCode = memory[currInstr];\n    if (opCode === LABEL) {\n      _labels[ memory[currInstr + 1] ] = currInstr + numArgs[opCode] + 1;\n      currInstr += numArgs[opCode] + 1;\n    } else if (opCode === DATA || opCode === CHDATA) {\n      const label =  memory[currInstr + 1]; \n      _statics[ label ] = currInstr  + 2; // label points to the size byte\n      currInstr +=  1 + 2 + memory[ _statics[label] ] ;\n    } else {\n      currInstr += numArgs[opCode] + 1;\n    }\n  }\n\n  // Execute\n  let lhs = 0, rhs = 0; // Utility vars\n  while (registers[RIP] < codeEnd) {\n    var rip = registers[RIP];\n    switch (memory[rip]) {\n      case HALT:\n        // registers[RIP] += numArgs[memory[rip]] + 1;\n        return;\n      case PRINT:\n        print(registers[memory[rip + 1]]);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case ADD: // Adds two registers\n        registers[memory[rip + 1]] += registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case ADDI:\n        registers[memory[rip + 1]] += memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SUB: \n        registers[memory[rip + 1]] -= registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SUBI:\n        registers[memory[rip + 1]] -= memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case MUL: \n        registers[memory[rip + 1]] *= registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case MULI:\n        registers[memory[rip + 1]] *= memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case DIV: \n        rhs = registers[memory[rip + 2]];\n        if (rhs === 0) { alert('SIGFPE - division by 0'); return; }\n        registers[memory[rip + 1]] = Math.floor(registers[memory[rip + 1]] / rhs);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case DIVI:\n        rhs = memory[rip + 2];\n        if (rhs === 0) { alert('SIGFPE - division by 0'); return; }\n        registers[memory[rip + 1]] = Math.floor(registers[memory[rip + 1]] / rhs);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SET:\n        registers[memory[rip + 1]] = registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SETI:\n        registers[memory[rip + 1]] = memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case JMPI:\n        registers[RIP] = memory[rip + 1];\n        break;\n      case JMPL:\n        registers[RIP] = _labels[memory[rip + 1]];\n        break;\n      case LABEL:\n        // noop\n       registers[RIP] += 2;\n       break;\n      case JMPEQ:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs === rhs) {\n          registers[RIP] = memory[rip + 3];\n        } else {\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n        break;\n      case JMPEQI:\n        lhs = registers[memory[rip + 1]];\n        rhs = memory[rip + 2];\n        if (lhs === rhs) {\n          registers[RIP] = memory[rip + 3];\n        } else {\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case JMPGT:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs > rhs) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n       case JMPGTE:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs >= rhs) {\n          registers[RIP] = registers[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n       case JMPLT:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs < rhs) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n        break;\n       case JMPLTE:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs <= rhs) {\n          registers[RIP] = registers[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case JMPEQIL:\n      case JMPNEQIL:\n        lhs = registers[memory[rip + 1]];\n        rhs = memory[rip + 2];\n        let truthy = memory[rip] === JMPEQIL ? lhs === rhs : lhs !== rhs;\n        if (truthy) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case AOL:  // AOL label register\n        // Puts the address of label label in register\n        let addr = _statics[memory[rip + 1]];\n        if (addr === undefined) {\n          addr = _labels[memory[rip + 1]];\n        } // TODO: labels and statics can be one case\n        registers[memory[rip + 2]] = addr;\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case JMPEQL:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[ memory[rip + 2] ];\n        if (lhs === rhs) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case PRINTBYTEI:\n        print(String.fromCharCode( memory[rip + 1]  ) );\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case PRINTBYTE:\n        const byteToPrint = memory[registers[ memory[rip+1] ] ]; // Arg is a register contaiing address of byte to print\n        print( String.fromCharCode( byteToPrint  ) );\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case DATA:\n      case CHDATA:\n        // Noop\n        const label =  memory[rip + 1]; \n        registers[RIP] +=  2 + memory[ _statics[label] ]  +  1 ; // label, size, num of chars, +1 offset\n        break;\n      case LOAD:\n        registers[memory[rip+1]] = memory[registers[memory[rip+2]]];\n        console.log(`Load ${memory[registers[memory[rip+2]]]} into R${memory[rip+1]}`);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case STORE: // Store value of first arg (reg) into memory pointed to by second ard\n        memory[registers[memory[rip+2]]] = registers[memory[rip+1]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case STORI: // Store value of first arg (reg) into memory pointed to by second ard\n        memory[registers[memory[rip+2]]] = memory[rip+1];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case PUSH:\n        memory[registers[RSP]++] = registers[memory[rip+1]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case POP:\n        const topOfStack = registers[RSP] - 1;\n        registers[memory[rip+1]] = memory[topOfStack];\n        registers[RSP] = topOfStack;\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case CALL:\n        // First push RRA to stack\n        memory[registers[RSP]++] = registers[RRA];\n        // Write addr of next instruction to RRA\n        registers[RRA] = registers[RIP] + numArgs[memory[rip]] + 1;\n        // Jump to label\n        registers[RIP] = _labels[memory[rip + 1]];\n        break;\n      case RET:\n        // Pop stack RA into RRA, then jump there\n        const ra = registers[RRA];\n        registers[RRA] = memory[--registers[RSP]];\n        registers[RIP] = ra;\n        break;\n      case PCALL:\n        // Write addr of next instruction to RIP - we'll preserve this\n        registers[RIP] = registers[RIP] + numArgs[memory[rip]] + 1;\n        const registerStateAtCallTime = [...registers];\n\n        // Everything between [RBP and RSP) is an arg\n        let pcall_args = [];\n        for (let i = registers[RBP]; i < registers[RSP]; i++) {\n          pcall_args.push(memory[i]);\n        }\n\n        // This is important because when we restore RSP, we don't how how many args were provided for the call.\n        // Setting it 'minus args' here will let us simply increment by the number of return values in PRET.\n        registerStateAtCallTime[RSP] -= pcall_args.length;\n\n        // Preserve registers\n        for (let i = 0; i < registerStateAtCallTime.length; i++) {\n          memory[registers[RBP] + i] = registerStateAtCallTime[i];\n        }\n\n        // BP is where first arg sits\n        // Put args on top\n        for (let i = 0; i < pcall_args.length; i++) {\n          memory[registers[RBP] + registers.length + i ] = pcall_args[i];\n        }\n\n        registers[RBP] = registers[RBP] + registers.length;\n        registers[RSP] = registers[RSP] + registers.length;\n\n        pcall_args.splice(0, pcall_args.length);\n\n        // Jump to label\n        registers[RIP] = _labels[memory[rip + 1]];\n        break;\n      case PRET:\n        const registerStateAtReturnTime = [...registers];\n        // Gather retvals\n        let retVals = [];\n        for (let i = registerStateAtReturnTime[RBP]; i < registerStateAtReturnTime[RSP]; i++) {\n          retVals.push(memory[i]);\n        }\n\n        // Restore regs\n        for (let i = 0; i < registerStateAtReturnTime.length; i++) {\n          registers[i] = memory[ registerStateAtReturnTime[RBP] - registers.length + i ];\n        }\n        // Push retvals and adjust SP\n        retVals.forEach(v => {\n          memory[registers[RSP]] = v;\n          registers[RSP]++;\n        });\n\n        retVals.splice(0, retVals.length);\n\n        break;\n    }\n\n    if (oneStep) break;\n  } \n}\n\n// execute(0, memory.length);\n\nfunction CuteMachine(memory, print=console.log) {\n  this.registers = [0, 0, 0, 0, 0, 0, 64, 64, 0];\n  this.memory = memory;\n  this.print=print;\n\n  this.execute = () => _execute(this.memory, this.registers, 0, this.memory.length, false, print);\n  this.executeStep = () => _execute(this.memory, this.registers, 0, this.memory.length, true, print);\n  this.setIp = (val) => this.registers[ this.REGISTER_NUMS['RIP'] ] = val;\n\n  this.REGISTER_NAMES = REGISTER_NAMES;\n  this.REGISTER_NUMS = REGISTER_NUMS;\n  this.OPCODES = OPCODES;\n  this.OPS = OPS;\n\n};\n\nmodule.exports = CuteMachine;\n","function lex(source) {\n    const tokens = [];\n    let currTok = [];\n    let inComment = false;\n\n    source.split('').forEach(c => {\n        if (c == '\\n') {\n            inComment = false;\n        }\n        if (inComment) { return; }\n        if (c == '#') {\n            inComment = true;\n            return;\n        } else if ((c == ' ' || c == '\\n') && currTok.length > 0) {\n            var token = currTok.join('').trim();\n            if (!token) return;\n            tokens.push(token);\n            currTok = [];\n        } else if (['\\t', ''].indexOf(c) === -1) {\n            currTok.push(c);\n        }\n    });\n\n    if (!inComment) {\n        var token = currTok.join('').trim();\n        if (!token) return tokens;\n        tokens.push(token);\n    }\n\n    return tokens;\n}\n\nfunction assemble(tokens, machine, out={}) {\n    const code = [];\n    out.disasm = tokens.slice();\n    const labels = {}; let labelNum = 1;\n    let i = 0;\n    while (i < tokens.length) {\n        const opStr = tokens[i];\n        const op = machine.OPS[opStr];\n        if (op === undefined) {\n            throw new Error(\"Parsing error. Expected op at index \" + i.toString() + \" but got \" + opStr);\n        }\n        let opMeta = machine.OPCODES[op];\n        if (opMeta.name === \"DATA\") {\n            const label = tokens[i+1];\n            labels[label] = labelNum++;\n            const length = parseInt(tokens[i+2]);\n            i += length;\n        } else if (opMeta.name === \"CHDATA\") {\n            const label = tokens[i+1];\n            labels[label] = labelNum++;\n            const length = parseInt(tokens[i+2]);\n            const str = tokens[i+3].split('');  // TODO: Do we really need size here?? Can be implicit.\n            for (let j = 0; j < length; j++) {\n                tokens.splice(i + j + 3, 0, str[j].charCodeAt(0));\n            }\n            tokens.splice(i + str.length + 3, 1);\n\n            // Keep original chars in disassembly\n            out.disasm = tokens.slice();\n            for (let j = 0; j < length; j++) {\n                out.disasm[i + j + 3] = str[j];\n            }\n            i += length;\n        } else if (opMeta.name == \"LABEL\") {\n            const label = tokens[i+1];\n            labels[label] = labelNum++;\n        } else if (opMeta.name === \"AOL\") {\n            const labelNum = labels[tokens[i+1]];\n            if (labelNum === undefined) {\n                throw new Error('Usage of undefined label: ' + tokens[i+2].toString());\n            }\n            tokens[i+1] = labelNum;\n        }\n        i += opMeta.args + 1;\n    }\n    i = 0;\n\n    while (i < tokens.length) {\n        const opStr = tokens[i];\n        const op = machine.OPS[opStr];\n        if (op === undefined) {\n            throw new Error(\"Parsing error. Expected op at index \" + i.toString() + \" but got \" + opStr);\n        }\n\n        code.push(op);\n        let opMeta = machine.OPCODES[op];\n        let j = 0;\n        while (j++ < opMeta.args) {\n            if (i + j >= tokens.length) {\n                throw new Error(\"Parse runs past code area\");\n            }\n            const arg = tokens[i + j];\n            const argAsInt = parseInt(arg);\n            if (machine.REGISTER_NUMS[arg] !== undefined) {\n                code.push(machine.REGISTER_NUMS[arg]);\n            } else if (isNaN(argAsInt) && labels[arg] !== undefined) { // labels cannot start w a number\n                code.push( labels[arg] );\n            } else {\n                code.push( parseInt(arg) );\n            }\n\n            if (opMeta.varLen && j === opMeta.args) {\n                // Fixed args parsed - last one is number of true args which we parse now\n                const numVarArgs = code[code.length-1];\n                for (let k = 1; k <= numVarArgs; k++) {\n                    const varArg = tokens[i + j  + k];\n                    code.push(parseInt(varArg));\n                }\n                i += numVarArgs;\n            }\n        }\n        i += opMeta.args + 1;\n    }\n    console.log(labels);\n    return code;\n}\n\nfunction memLoad(memory , addr, contents) {\n    if (addr + contents.length > memory.length) {\n        throw new Error(`Not enough memory to load ${memory.length} bytes at ${addr}`)\n    }\n    contents.forEach((b, i) => memory[addr + i] = b);\n    return memory;\n}\n\nfunction memLoadWillOverwrite(memory , addr, contents) {\n    for (let i = 0; i < contents.length; i++) {\n        if (addr + contents.length > memory.length) {\n            throw new Error(`Not enough memory to load ${memory.length} bytes at ${addr}`)\n        }\n\n        if (memory[addr + i] !== 0) {\n            return true;\n        }\n    }\n    return false;\n}\n\nconst Assemble = function(machine, source, loadAtAddr=0) {\n    const tokens = lex(source);\n    let out = {};\n    const asm = assemble(tokens, machine, out);\n    memLoad(machine.memory, loadAtAddr, asm);\n    return out.disasm;\n };\n\nmodule.exports = Assemble;\n\n","const PRINT_1_TO_10 = `SETI R0 0\nLABEL INCRANDPRINT\nADDI R0 1\nPRINT R0\nJMPEQIL R0 10 DONE\nJMPL INCRANDPRINT\nLABEL DONE\n`;\n\nconst PRINT_SUM_1_TO_10 = `# Print sum of all numbers from 1 to 10\n# R0 is total, R1 is loop var\nSETI R0 0\nSETI R1 1\nLABEL ADDANDINCR\nADD R0 R1\nADDI R1 1\nJMPEQIL R1 11 PRINTRES\nJMPL ADDANDINCR\nLABEL PRINTRES\nPRINT R0`;\n\nconst REC_FACTORIAL = `SETI R0 4  # Calculate factorial(4). Try changing the arg!\nPUSH R0\nPCALL FACTORIAL\nPOP R0\nPRINT R0\nHALT\n\nLABEL FACTORIAL\nPOP R0          # R0 is the arg\nSETI R1 2\nJMPLT R0 R1 ret1\n\n# non-trivial factorial\nSETI R2 0\nADD R2 R0 # R2 is the result\n\n# find factorial of R0 (arg) - 1\nSUBI R0 1\nPUSH R0\nPCALL FACTORIAL\nPOP R3\n\n# Answer is [original] R0 * factorial of [original] R0 - 1\nMUL R2 R3\nPUSH R2\nPRET\n\n# trivial case - return 0\nLABEL ret1\nSETI R0 1\nPUSH R0\nPRET `;\n\nconst DIGIT_ADDER = `# This program adds an arbitrarily long addition expression of single\n# digit numbers. To change arg, change the length of the expression\n# and change the expression below. For example, try, changing the line\n# below to:  CHDATA src 9 3+4+9+1+2\nCHDATA src 5 3+4+4\n\nAOL src R0  # R0 has address of src\nADDI R0 1   # next char, so pointing at first char\nPUSH R0\nPCALL EXPR\nPOP R0\nPRINT R0\nHALT\n\nLABEL EXPR\n    POP R1      # R1 is address to start at\n    LOAD R2 R1  # R2 is char to parse\n    PUSH R2\n    PCALL PARSENUM\n    POP R2      # R2 is parsed LHS\n\n    ADDI R1 1    # R1 is *Operator\n    LOAD R3 R1   # R4 is the Operator\n\n    JMPNEQIL R3 43 done # Not an addition (43 is '+')\n    ADDI R1 1\n    PUSH R1\n    PCALL EXPR\n    POP R1\n    ADD R2 R1\n\n    LABEL done\n    PUSH R2\n    PRET   \n\nLABEL PARSENUM\n    POP R1\n    SUBI R1 48\n    PUSH R1\n    PRET`;\n  \n\nmodule.exports = [{\n    name: 'Print nums from 1 to 10',\n    source: PRINT_1_TO_10,\n},\n{\n    name: 'Sum numbers from 1 to 10',\n    source: PRINT_SUM_1_TO_10\n},\n{\n    name: 'Digit parser and adder',\n    source: DIGIT_ADDER\n},\n{\n    name: 'Recursive factorial',\n    source: REC_FACTORIAL\n}];","import React from 'react';\nimport Table from 'react-bootstrap/Table'\nimport Container from 'react-bootstrap/Container'\nimport Row from 'react-bootstrap/Row'\nimport Col from 'react-bootstrap/Col'\nimport Button from 'react-bootstrap/Button'\nimport InputGroup from 'react-bootstrap/InputGroup'\nimport FormControl from 'react-bootstrap/FormControl'\nimport Badge from 'react-bootstrap/Badge'\n\nconst CuteMachine = require('./cute');\nconst Assemble = require('./assembler');\n\n\n\nconst EXAMPLE_PROGRAMS = require('./example_programs');\n\nconst STYLES = {\n    ripBgColor: 'LavenderBlush',\n    ripColor: 'black',\n    tableHeaderColor: 'ivory',\n    rspBgColor: 'lavender',\n    rbpBgColor: 'Moccasin',\n};\n\nclass MachineStateView extends React.Component {\n    constructor(props) {\n        super(props);\n        const memory = new Array(1024).fill(0);\n        this.machine = new CuteMachine(memory, alert);\n        this.numAddrsToDisplay = 128;\n        this.numBytesPerRow = 16;\n        this.state = {\n            memory: memory,\n            memDisplayStartAddr: 0,\n            registers: this.machine.registers,\n            source: '',\n            asmArea: '',\n            loadAddr: 0,\n            disasmTokens: [],\n            disasmIsFresh: false,\n            docInstr: -1,\n        };\n\n    }\n\n    memSet(addr, val) {\n        val = parseInt(val);\n        if (isNaN(val)) { val = 0; }\n        this.machine.memory[addr] = val;\n        this.setState({ memory: this.machine.memory, disasmIsFresh: false });\n    }\n\n    regSet(num, val) {\n        val = parseInt(val);\n        if (isNaN(val)) { val = 0; }\n        this.machine.registers[num] = val;\n        this.setState({ registers: this.machine.registers });\n    }\n\n    setLoadAddr(val) {\n        val = parseInt(val);\n        if (isNaN(val) || val >= this.machine.memory.length) { val = 0; }\n        /* Changing load address invalidates disassembly */\n        this.setState({ loadAddr: val, disasmIsFresh: false });\n    }\n\n    run() {\n        this.machine.execute();\n        this.setState({ registers: this.machine.registers, memory: this.machine.memory });\n    }\n\n    step() {\n        this.machine.executeStep();\n        this.setState({ registers: this.machine.registers, memory: this.machine.memory });\n    }\n\n    inspectAddr(val) {\n        val = parseInt(val);\n        if (isNaN(val)) return;\n        if (val < 0 || val >= this.machine.memory.length) return;\n        this.setState({ memDisplayStartAddr: val });\n    }\n\n    asmAreaEdit(e) {\n        this.setState({ asmArea: e });\n    }\n\n    assemble() {\n        let tokens = [];\n        try {\n            tokens = Assemble(this.machine, this.state.asmArea, this.state.loadAddr);\n            this.machine.registers[this.machine.REGISTER_NUMS['RSP']] = (this.state.loadAddr || 0) + tokens.length + 1;\n            this.machine.registers[this.machine.REGISTER_NUMS['RBP']] = this.machine.registers[this.machine.REGISTER_NUMS['RSP']];\n            console.log(this.state.registers)\n            this.setState({ registers: this.machine.registers, memory: this.machine.memory, disasmTokens: tokens, disasmIsFresh: true });\n\n        } catch (e) {\n            alert(e);\n            this.setState({ registers: this.machine.registers, memory: this.machine.memory, disasmTokens: [], disasmIsFresh: false });\n\n        }\n    }\n\n    memPrev() {\n        let newAddr = this.state.memDisplayStartAddr - this.numAddrsToDisplay;\n        if (newAddr < 0) newAddr = 0;\n        this.setState({ memDisplayStartAddr: newAddr });\n\n    }\n\n    memNext() {\n        const newAddr = this.state.memDisplayStartAddr + this.numAddrsToDisplay;\n        if (newAddr >= this.machine.memory.length) return;\n        this.setState({ memDisplayStartAddr: newAddr });\n\n    }\n\n    availableInstrs() {\n        const instrs = [];\n        for (const [code, meta] of Object.entries(this.machine.OPCODES)) {\n            instrs.push({ name: meta.name, opCode: code, desc: meta.desc });\n        }\n        return instrs;\n    }\n\n    render() {\n        const bytes = this.state.memory.slice(this.state.memDisplayStartAddr,\n            this.state.memDisplayStartAddr + this.numAddrsToDisplay);\n        const memTable = [];\n        const ripValueAdj = this.state.registers[this.machine.REGISTER_NUMS.RIP] - this.state.memDisplayStartAddr;\n        const rspValueAdj = this.state.registers[this.machine.REGISTER_NUMS.RSP] - this.state.memDisplayStartAddr;\n        const rbpValueAdj = this.state.registers[this.machine.REGISTER_NUMS.RBP] - this.state.memDisplayStartAddr;\n        bytes.forEach((_, i) => {\n            if (i % this.numBytesPerRow !== 0) return;\n            let cols = [];\n            for (let i = 0; i < this.numBytesPerRow; i++) { cols.push(i); }\n            memTable.push(\n                <tr key={`row-${i}`}>\n                    <td style={{ backgroundColor: STYLES.tableHeaderColor }}>{this.state.memDisplayStartAddr + i}</td>\n                    {cols.map(\n                        offset => {\n                            const addr = i + offset;\n                            const isRip = ripValueAdj === addr;\n                            const isRsp = rspValueAdj === addr;\n                            const isRbp = rbpValueAdj === addr;\n                            const dynaColor = isRip ? STYLES.ripBgColor : (isRsp ? STYLES.rspBgColor : (isRbp ? STYLES.rbpBgColor : ''));\n                            const absoluteAddr = addr + this.state.memDisplayStartAddr;\n                            const disasmAvailable = this.state.disasmIsFresh\n                                && absoluteAddr >= this.state.loadAddr\n                                && absoluteAddr < (this.state.loadAddr + this.state.disasmTokens.length);\n\n\n                            return <td key={`mem-${i + offset}`}\n                                style={{ backgroundColor: dynaColor, overflow: 'hidden' }}>\n                                {disasmAvailable ? <div className=\"disasm\">{this.state.disasmTokens[absoluteAddr - this.state.loadAddr]}</div> : ''}\n                                <input\n                                    type=\"text\"\n                                    style={{\n                                        width: '100%', border: 'none',\n                                        backgroundColor: dynaColor,\n                                    }}\n                                    onChange={e => this.memSet(i + offset, e.target.value)}\n                                    value={bytes[i + offset]}\n                                    disabled={i + offset + this.state.memDisplayStartAddr >= this.state.memory.length}\n                                /> </td>\n\n                        })}\n                </tr>\n            );\n        });\n\n        return <div className=\"monospaced\">  {/* <<  Flip this as needed */}\n            <Container>\n                <Row style={{ textAlign: \"center\" }}>\n                    <Col md={2}>\n                        <Row><Col style={{ marginBottom: '10px' }}><b>CPU</b></Col></Row>\n                        <Table bordered responsive size=\"sm\">\n                            <tbody>\n                                {this.state.registers.map((value, i) => {\n                                    const isRip = this.machine.REGISTER_NAMES[i] === 'RIP';\n                                    const isRsp = this.machine.REGISTER_NAMES[i] === 'RSP';\n                                    const isRbp = this.machine.REGISTER_NAMES[i] === 'RBP';\n                                    const dynaColor = isRip ? STYLES.ripBgColor : (isRsp ? STYLES.rspBgColor : (isRbp ? STYLES.rbpBgColor : ''));\n                                    return <tr key={`reg-row-${i}`}>\n                                        <td style={{ backgroundColor: STYLES.tableHeaderColor }}>{this.machine.REGISTER_NAMES[i]}</td>\n                                        <td key={`mem-${i}`} style={{ backgroundColor: dynaColor }}>\n                                            <input type=\"text\"\n                                                style={{ width: '100%', border: 'none', backgroundColor: dynaColor }}\n                                                value={value}\n                                                onChange={e => this.regSet(i, e.target.value)} /></td>\n                                    </tr>\n                                })}\n                            </tbody>\n                        </Table>\n                        <Row>\n                            <Col>\n                                <Button variant=\"light\" onClick={() => this.run()}>Run</Button>\n                                <Button style={{ marginLeft: '2px' }} variant=\"light\" onClick={() => this.step()}>Step</Button>\n                            </Col>\n                        </Row>\n                    </Col>\n                    <Col md={10}>\n                        <Col md={12}>\n                            <Row><Col style={{ marginBottom: '10px' }}><b>Memory</b></Col></Row>\n                            <Table bordered responsive size=\"sm\">\n                                <tbody>\n                                    {memTable}\n                                </tbody>\n                            </Table>\n                            <Row style={{ marginBottom: '5px', marginLeft: '5px' }}>\n                                <Button variant=\"light\" onClick={() => this.memPrev()}> {'<'} </Button>\n                                <Button style={{ marginLeft: '2px' }} variant=\"light\" onClick={() => this.memNext()}> {'>'} </Button>\n                                <input type=\"text\" style={{ border: 'solid 1px lightgray', marginLeft: '15px', paddingLeft: '10px' }} onChange={(e) => this.inspectAddr(e.target.value)} placeholder=\"Go to address\" />\n                            </Row>\n                        </Col>\n                    </Col>\n                </Row>\n\n                <hr />\n\n                <Row style={{ textAlign: \"center\", marginTop: '10px' }}>\n                    <Col sm={6}>\n                        <Row><Col style={{ marginBottom: '10px' }}><b>Assembler</b></Col></Row>\n                        <Row>\n                            <textarea placeholder=\"Assembly Editor\"\n                                style={{ width: '100%', height: '100%', minHeight: '220px', paddingLeft: '10px', borderColor: 'lightgray' }}\n                                value={this.state.asmArea}\n                                onChange={e => this.asmAreaEdit(e.target.value)} />\n                        </Row>\n                        <Row>\n                            <Col sm={12}>\n                                <InputGroup style={{ marginTop: '5px' }}>\n                                    <FormControl\n                                        onChange={(e) => this.setLoadAddr(e.target.value)}\n                                        placeholder=\"Address to load program at (Default = 0)\"\n                                    />\n                                    <InputGroup.Append>\n                                        <Button variant=\"info\" onClick={() => this.assemble()}>Load</Button>\n                                    </InputGroup.Append>\n                                </InputGroup>\n                            </Col>\n                        </Row>\n                    </Col>\n\n\n                    <Col sm={6}>\n                        <Row><Col style={{ marginBottom: '10px' }}><b>Example Programs</b></Col></Row>\n                        <Row>\n                            <Col sm={12} style={{ overflowY: 'scroll' }}>\n                                <h5>\n                                    {EXAMPLE_PROGRAMS.map((p, i) => <a key={`example-prog-${i}`} onClick={() => this.setState({ asmArea: p.source })}><Badge className=\"instrDocBtn\" pill variant=\"light\">{p.name}</Badge>{' '}</a>)}\n                                </h5>\n                            </Col>\n                        </Row>\n                        <Row><Col style={{ marginBottom: '10px' }}><b>Instruction Set</b></Col></Row>\n                        <Row>\n                            <Col sm={12} style={{ overflowY: 'scroll' }}>\n                                <h5>\n                                    {this.availableInstrs().map((instr, i) => <a key={`instrdoc-${i}`} onClick={()=>this.setState({docInstr: i})}><Badge className=\"instrDocBtn\" pill variant={this.state.docInstr === i ? 'primary' : 'light'}>{instr.name}</Badge>{' '}</a>)}\n                                </h5>\n                                <br/>\n                                { this.state.docInstr === -1 ? '' : this.availableInstrs()[this.state.docInstr].desc}\n                            </Col>\n                        </Row>\n                    </Col>\n\n                </Row>\n            </Container>\n        </div >\n    };\n\n};\n\nexport default MachineStateView;","import 'bootstrap/dist/css/bootstrap.min.css';\nimport MachineStateView from './MachineStateView';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <br/><br/>\n          <MachineStateView/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}