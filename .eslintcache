[{"/workspaces/cute/src/reportWebVitals.js":"1","/workspaces/cute/src/cute.js":"2","/workspaces/cute/src/App.js":"3","/workspaces/cute/src/assembler.js":"4","/workspaces/cute/src/MachineStateView.js":"5","/workspaces/cute/src/example_programs.js":"6"},{"size":362,"mtime":1619322676585,"results":"7","hashOfConfig":"8"},{"size":17854,"mtime":1619327788253,"results":"9","hashOfConfig":"8"},{"size":259,"mtime":1619322676585,"results":"10","hashOfConfig":"8"},{"size":4868,"mtime":1619328647115,"results":"11","hashOfConfig":"8"},{"size":12719,"mtime":1619331550179,"results":"12","hashOfConfig":"8"},{"size":1999,"mtime":1619331486718,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9m6xuu",{"filePath":"16","messages":"17","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/workspaces/cute/src/reportWebVitals.js",[],"/workspaces/cute/src/cute.js",["27","28","29","30","31","32"],"const REGISTER_NAMES = {\n  0 : 'R0',\n  1 : 'R1',\n  2 : 'R2',\n  3 : 'R3',\n  4 : 'R4',\n  5 : 'RRA',\n  6 : 'RBP',\n  7 : 'RSP',\n  8 : 'RIP',\n};\n\n// Reverse mapping of REGISTER_NAMES\nconst REGISTER_NUMS = {};\nfor (let num in REGISTER_NAMES) {\n  REGISTER_NUMS[REGISTER_NAMES[num]] = num;\n}\n\nconst OPCODES = {\n  0: { name: 'HALT', args: 0, desc: 'Args: none  -  Stops execution of the program here. Does not advance IP' },\n  1: { name: 'ADD', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 + Reg2' },\n  2: { name: 'ADDI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg + Immediate' },\n  3: { name: 'SUB', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 - Reg2'  },\n  4: { name: 'SUBI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg - Immediate' },\n  // 5: { name: 'ASSERT', args: 1 , desc: '' },\n  6: { name: 'LABEL', args: 1 , desc: 'Args: <Label>  -  Creates a label with given name, pointing to next instruction' },\n  7: { name: 'JMPL', args: 1 , desc: 'Args: <Label> - Unconditional jump to the label with given name' },\n  8: { name: 'JMPGT', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 > Reg2' },\n  9: { name: 'JMPGTE', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 >= Reg2' },\n  10: { name: 'JMPEQ', args: 3 , desc: 'Args: <Reg1> <Reg2> <Immediate> - Conditional jump to Immediate address if Reg1 equals Reg2' },\n  11: { name: 'PRINT', args: 1 , desc: 'Args: <Reg> - Print the value of Reg' },\n  12: { name: 'SETI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Immediate' },\n  13: { name: 'JMPI', args: 1 , desc: 'Args:  <Address> - Unconditional jump to Address' },\n  14: { name: 'JMPEQI', args: 3 , desc: 'Args: <Reg> <Address1> <Address2> - If Reg = value at Address1, jump to Address2' },\n  15: { name: 'JMPEQIL', args: 3 , desc: 'Args: <Reg> <Address> <Label>  -  If value of Reg equals Immediate, jump to Label' },\n  16: { name: 'PRINTBYTE', args: 1 , desc: 'Args: <Reg> - PRINT, but Reg is a register contaiing address of byte to print' },\n  17: { name: 'DATA', args: 2, varLen: true , desc: 'VarArgs: <Label> <Length> [Bytes] - Defines static data of given Length, with given Label' },\n  // 18: { name: 'PRINTSTRL', args: 1 , desc: '' },\n  19: { name: 'PRINTBYTEI', args: 1 , desc: 'Args: <Immediate> - Prints ASCII character for the given immediate' },\n  20: { name: 'JMPEQL', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 = Reg2' },\n  21: { name: 'SET', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets value Reg1 to the value of Reg2' },\n  22: { name: 'JMPLT', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 < Reg2' },\n  23: { name: 'JMPLTE', args: 3 , desc: 'Args: <Reg1> <Reg2> <Label> - Conditional jump to Label if Reg1 <= Reg2' },\n  24: { name: 'LOAD', args: 2 , desc: 'Args: <Reg1> <Reg2> - Load byte at address held in Reg2 into Reg1' },\n  25: { name: 'PUSH', args: 1 , desc: 'Args: <Reg> - Pushes the value of Reg to the top of the stack (RSP) and increments RSP' },\n  26: { name: 'POP', args: 1 , desc: 'Args: <Reg>  - Places the value on top of the stack (RSP-1) into Reg and decrements RSP' },\n  27: { name: 'CALL', args: 1 , desc: 'Args: <Label>  -  Pushes RRA onto the stack, sets RRA to next instruction, and jumps to Label' },\n  28: { name: 'RET', args: 0 , desc: 'Args: None  -  Returns control to the instruction at address RRA. Restores RRA to previous RRA value, which is expected to be on top of the stack (RSP-1)' },\n  29: { name: 'CHDATA', args: 2, varLen: true , desc: 'Varargs: <Label> <Length> STRING - Like DATA, but var-length data arg is provided as a character string. Eg. - CHDATA letters 5 ABCDE' },\n  30: { name: 'STORE', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Stores value of Reg1 at address held in Reg2' },\n  31: { name: 'AOL', args: 2 , desc: 'Args: <Label> <Register>  -  Address-of-label instruction. Sets Register to address Label refers to' },\n  32: { name: 'STORI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Stores Immediate value at address held in Reg' },\n  33: { name: 'JMPNEQIL', args: 3 , desc: 'Args: <Reg> <Immediate> <Label>  -  If value of Reg does not equal Immediate, jump to Label' },\n  34: { name: 'MUL', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 * Reg2' },\n  35: { name: 'MULI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg * Immediate' },\n  36: { name: 'DIV', args: 2 , desc: 'Args: <Reg1> <Reg2>  -  Sets Reg1 to Reg1 / Reg2'  },\n  37: { name: 'DIVI', args: 2 , desc: 'Args: <Reg> <Immediate>  -  Sets Reg to Reg / Immediate' },\n  38: { name: 'PCALL', args: 1 , desc: 'Preserved call. Like CALL, but preserves all registers' },\n  39: { name: 'PRET', args: 0 , desc: 'RET equivalent for PCALL - restores all preserved registers' },\n\n\n};\n\nconst OPS = {\n  HALT : 0,\n  ADD : 1,\n  ADDI : 2,\n  SUB : 3,\n  SUBI : 4,\n  ASSERT : 5,\n  LABEL : 6,\n  JMPL : 7,\n  JMPGT : 8,\n  JMPGTE : 9,\n  JMPEQ : 10,\n  PRINT : 11,\n  SETI   : 12,\n  JMPI : 13,\n  JMPEQI : 14,\n  JMPEQIL : 15,\n  PRINTBYTE : 16,\n  DATA : 17, // DATA HELLOWORLD SIZE  'H' 'E'\n  PRINTSTRL : 18, // Print a string at a label\n  PRINTBYTEI : 19,\n  JMPEQL : 20,\n  SET : 21,\n  JMPLT: 22,\n  JMPLTE : 23,\n  LOAD: 24,\n  PUSH : 25,\n  POP : 26,\n  CALL : 27,\n  RET : 28,\n  CHDATA : 29,\n  STORE : 30,\n  AOL : 31,\n  STORI : 32,\n  JMPNEQIL: 33,\n  MUL : 34,\n  MULI : 35, \n  DIV : 36,\n  DIVI : 37,\n  PCALL : 38,\n  PRET : 39,\n};\n\nconst\n    HALT = 0,\n    ADD = 1,\n    ADDI = 2,\n    SUB = 3,\n    SUBI = 4,\n    ASSERT = 5,\n    LABEL = 6,\n    JMPL = 7,\n    JMPGT = 8,\n    JMPGTE = 9,\n    JMPEQ = 10,\n    PRINT = 11,\n    SETI   = 12,\n    JMPI = 13,\n    JMPEQI = 14,\n    JMPEQIL = 15,\n    PRINTBYTE = 16,\n    DATA = 17, // DATA HELLOWORLD SIZE  'H' 'E'\n    PRINTSTRL = 18, // Print a string at a label\n    PRINTBYTEI = 19,\n    JMPEQL = 20,\n    SET = 21,\n    JMPLT = 22,\n    JMPLTE = 23,\n    LOAD = 24,\n    PUSH = 25,\n    POP = 26,\n    CALL = 27,\n    RET = 28,\n    CHDATA = 29,\n    STORE = 30,\n    AOL = 31,\n    STORI = 32, \n    JMPNEQIL = 33,\n    MUL = 34,\n    MULI = 35, \n    DIV = 36,\n    DIVI = 37,\n    PCALL = 38,\n    PRET = 39;\n\nconst numArgs = [];\nObject.keys(OPCODES).forEach(k => numArgs[k] = OPCODES[k].args);\n\nconst registers = [0, 0, 0, 0, 0, 0, 0, 0];\nconst R0 = 0, R1 = 1, R2=2, R3=3, R4=4, RRA=5, RBP= 6, RSP=7, RIP=8;\n\n\nlet memory = [\n  SETI, R1, 1, JMPI, 8, ADDI, R1, 5, ADDI, R1, 8, PRINT, R1, LABEL, 'ADD3MORE', ADDI, R1, 3, PRINT, R1\n];\n\n// Let's try a hello world\nconst c =  char =>  char.charCodeAt(0);\nmemory = [\n  DATA, \"HW\", 11, c('H'), c('e'), c('l'), c('l'), c ('o'), c(' '), c('W'), c('o'), c('r'), c('l'), c('d'),\n  SETI, R0, 11, // Length of str\n  SETI, R1, 0,  // Curr idx in str\n  SETI, R2, 3,  // Address of start of string \n  LABEL, \"PRINTCHAR\",\n  SET, R3, R2, // R3 is a temp we used to calculate start of string + curr index\n  ADD, R3, R1,\n  PRINTBYTE, R3,\n  ADDI, R1, 1,\n  JMPEQL, R1, R0, \"DONE\",\n  JMPL, \"PRINTCHAR\",\n  LABEL, \"DONE\",\n  \n];\n\n// total = 0\n// current_num = 1\n// while (current_num < 11) { total = total + current_num; current_num = current_num + 1; }\n\n\nfunction _execute(memory, registers, codeStart, codeEnd, oneStep, print) {\n  // console.log(memory)\n\n  // Find labels and static data in the code\n  const _labels = {};\n  const _statics = {};\n  let currInstr = codeStart;\n  while (currInstr < codeEnd) {\n    const opCode = memory[currInstr];\n    // console.log(opCode);\n    if (opCode === LABEL) {\n      _labels[ memory[currInstr + 1] ] = currInstr + numArgs[opCode] + 1;\n      currInstr += numArgs[opCode] + 1;\n    } else if (opCode === DATA || opCode === CHDATA) {\n      const label =  memory[currInstr + 1]; \n      _statics[ label ] = currInstr  + 2; // label points to the size byte\n      currInstr +=  1 + 2 + memory[ _statics[label] ] ;\n    } else {\n      currInstr += numArgs[opCode] + 1;\n    }\n  }\n  // console.log(_statics);\n  // if (!oneStep && _labels['start'] !== undefined) {\n  //   registers[RIP] = _labels['start'];\n  // }\n\n  // Execute\n  // console.log(\"Executing...\");\n  let lhs = 0, rhs = 0; // Utility vars\n  while (registers[RIP] < codeEnd) {\n    var rip = registers[RIP];\n    switch (memory[rip]) {\n      case HALT:\n        // registers[RIP] += numArgs[memory[rip]] + 1;\n        return;\n      case PRINT:\n        print(registers[memory[rip + 1]]);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case ADD: // Adds two registers\n        registers[memory[rip + 1]] += registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case ADDI:\n        registers[memory[rip + 1]] += memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SUB: \n        registers[memory[rip + 1]] -= registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SUBI:\n        registers[memory[rip + 1]] -= memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case MUL: \n        registers[memory[rip + 1]] *= registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case MULI:\n        registers[memory[rip + 1]] *= memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case DIV: \n        rhs = registers[memory[rip + 2]];\n        if (rhs === 0) { alert('SIGFPE - division by 0'); return; }\n        registers[memory[rip + 1]] = Math.floor(registers[memory[rip + 1]] / rhs);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case DIVI:\n        rhs = memory[rip + 2];\n        if (rhs === 0) { alert('SIGFPE - division by 0'); return; }\n        registers[memory[rip + 1]] = Math.floor(registers[memory[rip + 1]] / rhs);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SET:\n        registers[memory[rip + 1]] = registers[memory[rip + 2]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case SETI:\n        registers[memory[rip + 1]] = memory[rip + 2];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case JMPI:\n        registers[RIP] = memory[rip + 1];\n        break;\n      case JMPL:\n        registers[RIP] = _labels[memory[rip + 1]];\n        break;\n      case LABEL:\n        // noop\n       registers[RIP] += 2;\n       break;\n      case JMPEQ:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs === rhs) {\n          registers[RIP] = memory[rip + 3];\n        } else {\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n        break;\n      case JMPEQI:\n        lhs = registers[memory[rip + 1]];\n        rhs = memory[rip + 2];\n        if (lhs === rhs) {\n          registers[RIP] = memory[rip + 3];\n        } else {\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case JMPGT:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs > rhs) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n       case JMPGTE:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs >= rhs) {\n          registers[RIP] = registers[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n       case JMPLT:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs < rhs) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n        break;\n       case JMPLTE:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[memory[rip + 2]];\n        if (lhs <= rhs) {\n          registers[RIP] = registers[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case JMPEQIL:\n      case JMPNEQIL:\n        lhs = registers[memory[rip + 1]];\n        rhs = memory[rip + 2];\n        let truthy = memory[rip] === JMPEQIL ? lhs === rhs : lhs !== rhs;\n        if (truthy) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case AOL:  // AOL label register\n        // Puts the address of label label in register\n        let addr = _statics[memory[rip + 1]];\n        if (addr === undefined) {\n          addr = _labels[memory[rip + 1]];\n        } // TODO: labels and statics can be one case\n        registers[memory[rip + 2]] = addr;\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case JMPEQL:\n        lhs = registers[memory[rip + 1]];\n        rhs = registers[ memory[rip + 2] ];\n        if (lhs === rhs) {\n          registers[RIP] = _labels[memory[rip + 3]];\n        } else {\n          registers[RIP] += numArgs[memory[rip]] + 1;\n        }\n       break;\n      case PRINTBYTEI:\n        print(String.fromCharCode( memory[rip + 1]  ) );\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case PRINTBYTE:\n        const byteToPrint = memory[registers[ memory[rip+1] ] ]; // Arg is a register contaiing address of byte to print\n        print( String.fromCharCode( byteToPrint  ) );\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case DATA:\n      case CHDATA:\n        // Noop\n        const label =  memory[rip + 1]; \n        registers[RIP] +=  2 + memory[ _statics[label] ]  +  1 ; // label, size, num of chars, +1 offset\n        break;\n      case LOAD:\n        registers[memory[rip+1]] = memory[registers[memory[rip+2]]];\n        console.log(`Load ${memory[registers[memory[rip+2]]]} into R${memory[rip+1]}`);\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case STORE: // Store value of first arg (reg) into memory pointed to by second ard\n        memory[registers[memory[rip+2]]] = registers[memory[rip+1]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case STORI: // Store value of first arg (reg) into memory pointed to by second ard\n        memory[registers[memory[rip+2]]] = memory[rip+1];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case PUSH:\n        memory[registers[RSP]++] = registers[memory[rip+1]];\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case POP:\n        const topOfStack = registers[RSP] - 1;\n        registers[memory[rip+1]] = memory[topOfStack];\n        registers[RSP] = topOfStack;\n        registers[RIP] += numArgs[memory[rip]] + 1;\n        break;\n      case CALL:\n        // First push RRA to stack\n        memory[registers[RSP]++] = registers[RRA];\n        // Write addr of next instruction to RRA\n        registers[RRA] = registers[RIP] + numArgs[memory[rip]] + 1;\n        // Jump to label\n        registers[RIP] = _labels[memory[rip + 1]];\n        break;\n      case RET:\n        // Pop stack RA into RRA, then jump there\n        const ra = registers[RRA];\n        registers[RRA] = memory[--registers[RSP]];\n        registers[RIP] = ra;\n        break;\n      case PCALL:\n        // Write addr of next instruction to RIP - we'll preserve this\n        registers[RIP] = registers[RIP] + numArgs[memory[rip]] + 1;\n        const registerStateAtCallTime = [...registers];\n\n        // Everything between [RBP and RSP) is an arg\n        let pcall_args = [];\n        for (let i = registers[RBP]; i < registers[RSP]; i++) {\n          pcall_args.push(memory[i]);\n        }\n\n        // This is important because when we restore RSP, we don't how how many args were provided for the call.\n        // Setting it 'minus args' here will let us simply increment by the number of return values in PRET.\n        registerStateAtCallTime[RSP] -= pcall_args.length;\n\n        // Preserve registers\n        for (let i = 0; i < registerStateAtCallTime.length; i++) {\n          memory[registers[RBP] + i] = registerStateAtCallTime[i];\n        }\n\n        // BP is where first arg sits\n        // Put args on top\n        for (let i = 0; i < pcall_args.length; i++) {\n          memory[registers[RBP] + registers.length + i ] = pcall_args[i];\n        }\n\n        registers[RBP] = registers[RBP] + registers.length;\n        registers[RSP] = registers[RSP] + registers.length;\n\n        pcall_args.splice(0, pcall_args.length);\n\n        // Jump to label\n        registers[RIP] = _labels[memory[rip + 1]];\n        break;\n      case PRET:\n        const registerStateAtReturnTime = [...registers];\n        // Gather retvals\n        let retVals = [];\n        for (let i = registerStateAtReturnTime[RBP]; i < registerStateAtReturnTime[RSP]; i++) {\n          retVals.push(memory[i]);\n        }\n\n        // Restore regs\n        for (let i = 0; i < registerStateAtReturnTime.length; i++) {\n          registers[i] = memory[ registerStateAtReturnTime[RBP] - registers.length + i ];\n        }\n        // Push retvals and adjust SP\n        retVals.forEach(v => {\n          memory[registers[RSP]] = v;\n          registers[RSP]++;\n        });\n\n        retVals.splice(0, retVals.length);\n\n        break;\n    }\n\n    if (oneStep) break;\n  } \n}\n\n// execute(0, memory.length);\n\nfunction CuteMachine(memory, print=console.log) {\n  this.registers = [0, 0, 0, 0, 0, 0, 64, 64, 0];\n  this.memory = memory;\n  this.print=print;\n\n  this.execute = () => _execute(this.memory, this.registers, 0, this.memory.length, false, print);\n  this.executeStep = () => _execute(this.memory, this.registers, 0, this.memory.length, true, print);\n  this.setIp = (val) => this.registers[ this.REGISTER_NUMS['RIP'] ] = val;\n\n  this.REGISTER_NAMES = REGISTER_NAMES;\n  this.REGISTER_NUMS = REGISTER_NUMS;\n  this.OPCODES = OPCODES;\n  this.OPS = OPS;\n\n};\n\nmodule.exports = CuteMachine;\n","/workspaces/cute/src/App.js",[],"/workspaces/cute/src/assembler.js",["33","34","35","36","37","38"],"/workspaces/cute/src/MachineStateView.js",["39","40"],"/workspaces/cute/src/example_programs.js",[],{"ruleId":"41","severity":1,"message":"42","line":113,"column":5,"nodeType":"43","messageId":"44","endLine":113,"endColumn":11},{"ruleId":"41","severity":1,"message":"45","line":126,"column":5,"nodeType":"43","messageId":"44","endLine":126,"endColumn":14},{"ruleId":"41","severity":1,"message":"46","line":152,"column":7,"nodeType":"43","messageId":"44","endLine":152,"endColumn":16},{"ruleId":"41","severity":1,"message":"47","line":153,"column":35,"nodeType":"43","messageId":"44","endLine":153,"endColumn":37},{"ruleId":"41","severity":1,"message":"48","line":162,"column":1,"nodeType":"43","messageId":"44","endLine":162,"endColumn":7},{"ruleId":"49","severity":1,"message":"50","line":214,"column":5,"nodeType":"51","messageId":"52","endLine":466,"endColumn":6},{"ruleId":"53","severity":1,"message":"54","line":7,"column":15,"nodeType":"55","messageId":"56","endLine":7,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":11,"column":15,"nodeType":"55","messageId":"56","endLine":11,"endColumn":17},{"ruleId":"53","severity":1,"message":"54","line":14,"column":23,"nodeType":"55","messageId":"56","endLine":14,"endColumn":25},{"ruleId":"53","severity":1,"message":"54","line":14,"column":35,"nodeType":"55","messageId":"56","endLine":14,"endColumn":37},{"ruleId":"53","severity":1,"message":"54","line":66,"column":32,"nodeType":"55","messageId":"56","endLine":66,"endColumn":34},{"ruleId":"41","severity":1,"message":"57","line":128,"column":10,"nodeType":"43","messageId":"44","endLine":128,"endColumn":30},{"ruleId":"58","severity":1,"message":"59","line":252,"column":69,"nodeType":"60","endLine":252,"endColumn":151},{"ruleId":"58","severity":1,"message":"59","line":260,"column":79,"nodeType":"60","endLine":260,"endColumn":147},"no-unused-vars","'ASSERT' is assigned a value but never used.","Identifier","unusedVar","'PRINTSTRL' is assigned a value but never used.","'registers' is assigned a value but never used.","'R4' is assigned a value but never used.","'memory' is assigned a value but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'memLoadWillOverwrite' is defined but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement"]